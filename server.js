const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require("bcrypt");
const session = require('express-session');

const app = express();
const PORT = 3000;

// Set EJS as the view engine
app.set('view engine', 'ejs');
app.set('views', __dirname + '/views'); // Set the views directory

/**
 * Middleware to parse JSON and handle sessions
 * This middleware is used to parse incoming JSON requests and manage user sessions.
 * Generated by ChatGPT -4o
 *
 * @author https://chat.openai.com/
 */
// Middleware to parse JSON
app.use(express.json());

// Middleware for sessions
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: 86400000 }
}));
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


// Database connection
mongoose.connect('mongodb://localhost:27017', {

    /** 
     * Setting's for database connection
     * With these settings, we can avoid deprecation warnings and ensure a more stable connection.
     * Generated by ChatGPT -4o
     * 
     * @author https://chat.openai.com/
     */
    useNewUrlParser: true,
    useUnifiedTopology: true,
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

}).then(() => {
    console.log('Connected to database successfully!');
}).catch((err) => {
    console.log('Error connecting to database:', err.message);
});

/** This is the schema for users, it acts as a template for models to use when creating new documents in the database.
 *  Transactions are included in the user schema.
 *  Pets are included in the user schema.
 */
const userSchema = new mongoose.Schema({
    username: String,
    password: String,
    balance: Number,
    transactions: Array,
    owned: Array,
    pet: String,
    date: Date
});

// Here we create a model for the user schema, this will be used to make our collection in the database.
const users = mongoose.model('users', userSchema);

// Redirect / to /login, in the event that only the base URL is entered in the browser.
// This redirects the user to the home page if they are logged in.
app.get('/', (request, result) => {
    if (request.session.uid) {
        return result.redirect('/home');
    }
    result.redirect('/login');
});

// Here the server will recognise that the server is requested with the /login URL and will render the login.ejs file.
// If the user is already logged in, they will be redirected to the home page.
app.get('/login', (request, result) => {
    if (request.session.uid) {
        return result.redirect('/home');
    }
    result.render('login');
});

// Here the server will recognise that the server is requested with the /home URL and will render the home file.
// If the user is not logged in, they will be redirected to the login page.
app.get('/home', (request, result) => {
    if (!request.session.uid) {
        return result.redirect('/login');
    }
    result.render('home');
});